package laba2;

import javax.swing.JFrame;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
public class integral {
    static double func(double x) { return Math.log(Math.pow(Math.sin(x),2)+1);}
    static double derivate1( double x) { return (Math.sin(2*x))/(Math.pow(Math.sin(x), 2)+1);}
    static double derivate2( double x) { return  (2*Math.cos(2*x)*(Math.pow(Math.sin(x),2)+1) - Math.pow(Math.sin(2*x),2)) / Math.pow(Math.pow(Math.sin(x),2)+1,2);}
    static double[] step(double a, double b, double h)
    {
        int n= (int) Math.round((b - a+h) / h);
        double[] arr = new double[n];
        for (int i = 0; i < n; i++) {
            arr[i] = a+h*i;
        }
        return arr;
    }
    static double koef1(double[]x, double[]y)
    {
        double z;
        double z1=0;
        double z2=0;
        double z3=0;
        double z4=0;
        for(int i=0; i<x.length;i++)
        {
            z1+=x[i];
        }
        for(int i=0; i<y.length;i++)
        {
            z2+=y[i];
        }
        for(int i=0; i<y.length;i++)
        {
            z3+=y[i]*x[i];
        }
        for(int i=0; i<y.length;i++)
        {
            z4+=Math.pow(x[i],2);
        }
        z=(y.length*z3-z1*z2)/(x.length*z4-z1*z1);
        return z;

    }

    static double Right_difference(double x,double h)  { return (func(x+h)-func(x))/h;}

    static double Central_difference_1(double x, double h) { return (func(x+h)-func(x-h))/(2*h);}

    static double Central_difference_2(double x, double h)
    {
        return ( func(x+h)-2*func(x)+func(x-h))/Math.pow(h,2);
    }


    static void Graffic (double[] arr, double[] arr1, int n,  String str)
    {

        XYSeries series = new XYSeries(str);
        for (int i = 0; i< n; i++)
        {
            series.add(arr[i], arr1[i] );
        }
        XYDataset xyDataset = new XYSeriesCollection(series);
        JFreeChart chart = ChartFactory
                .createXYLineChart(str, "x", "y",
                        xyDataset,
                        PlotOrientation.VERTICAL,
                        true, true, true);
        JFrame frame = new JFrame(str);
        frame.getContentPane()
                .add(new ChartPanel(chart));
        frame.setSize(800,600);
        frame.show();

    }
    public static void main ( String[] args)
    {
        double a = -1.5;
        double b = 1.5;
        double[] h= new double [20];
        double[] max= new double [h.length];
        for( int k=0;k<h.length;k++) {
            h[k]=1.0/(10+k);
            double[] arr = step(a, b, h[k]);
            double[] arr1 = new double[(int) Math.round((b - a+h[k] ) / h[k])];
            for (int i = 0; i < (int) Math.round((b - a+h[k] ) / h[k]); i++) {
                arr1[i] =(Right_difference(arr[i], h[k]) - derivate1(arr[i]));
            }
            max[k]=arr1[0];
            for(int i=0;i<(int) Math.round((b - a+h[k] ) / h[k]); i++) {
                if(max[k]<arr1[i])
                    max[k]=arr1[i];
            }

        }
        for(int i=0; i<h.length;i++)
        {
            max[i]=Math.log(max[i]);
        }
        double [] h1= new double[h.length];
        for(int i=0; i<h1.length;i++)
        {
            h1[i]=Math.log(h[i]);
            //System.out.println(h1[i]);
            //System.out.println(max[i]);
        }



        Graffic(h1,max,h.length, "Right Difference");
        System.out.println(koef1(h1,max));
        for(int k=0;k<h.length;k++)
        {
            double[] arr = step(a, b, h[k]);
            double[] arr1 = new double[(int) Math.round((b - a+h[k] ) / h[k])];
            for (int i = 0; i < (int) Math.round((b - a +h[k]) / h[k]); i++) {
                arr1[i] = Math.log(Central_difference_1(arr[i], h[k]) - derivate1(arr[i]));
            }
            max[k]=arr1[0];
            for(int i=0;i<(int) Math.round((b - a+h[k]) / h[k]); i++) {
                if(max[k]<arr1[i])
                    max[k]=arr1[i];
            }
        }
        Graffic(h1,max,h.length, "Central Difference");
        System.out.println(koef1(h1,max));
        for(int k=0;k<h.length;k++)
        {
            double[] arr = step(a, b, h[k]);
            double[] arr1 = new double[(int) Math.round((b - a+h[k]) / h[k])];
            for (int i = 0; i < (int) Math.round((b - a+h[k]) / h[k]); i++) {
                arr1[i] = Math.log(Central_difference_2(arr[i], h[k]) - derivate2(arr[i]));
            }
            max[k]=arr1[0];
            for(int i=0;i<(int) Math.round((b - a+h[k]) / h[k]); i++) {
                if(max[k]<arr1[i])
                    max[k]=arr1[i];
            }
        }
        Graffic(h1,max,h.length, "Central Difference2");


        System.out.println(koef1(h1,max));
    }
}
