package lab5;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import javax.swing.*;

public class lab5 {
    static double func(double x)
    {
        return Math.pow(Math.cos(x),0.5)+Math.exp(-x);
    }
    static double [] euler(double [] x, double h)
    {
        double y[]=new double[x.length];
        double w[]=new double[x.length];
        y[0]=2;
        w[0]=-1;
        for(int i=1;i<x.length;i++)
        {
            y[i]=y[i-1]+h*w[i-1];
            w[i]=w[i-1]+h*(Math.tan(x[i-1])*w[i-1]/2+(1+Math.tan(x[i-1])/2)*y[i-1]-Math.pow(Math.cos(x[i-1]),0.5)*(3+Math.tan(x[i-1]))/2);
        }
        return y;

    }

    static double [] runge(double [] x, double h)
    {
        double y[]=new double[x.length];
        double w[]=new double[x.length];
        double k1_w,k2_w,k3_w,k4_w;
        double k1,k2,k3,k4;
        y[0]=2;
        w[0]=-1;

        for(int i=1;i<x.length;i++)
        {
            k1_w=Math.tan(x[i-1])*w[i-1]/2+(1+Math.tan(x[i-1])/2)*y[i-1]-Math.pow(Math.cos(x[i-1]),0.5)*(3+Math.tan(x[i-1]))/2;
            k1=w[i-1];
            k2_w=Math.tan(x[i-1]+h/2)*(w[i-1]+h*k1_w/2)/2+(1+Math.tan(x[i-1]+h/2)/2)*(y[i-1]+h*k1/2)-Math.pow(Math.cos(x[i-1]+h/2),0.5)*(3+Math.tan(x[i-1]+h/2))/2;
            k2=w[i-1]+h*k1_w/2;
            k3_w=Math.tan(x[i-1]+h/2)*(w[i-1]+h*k2_w/2)/2+(1+Math.tan(x[i-1]+h/2)/2)*(y[i-1]+h*k2/2)-Math.pow(Math.cos(x[i-1]+h/2),0.5)*(3+Math.tan(x[i-1]+h/2))/2;
            k3=w[i-1]+h*k2_w/2;
            k4_w=Math.tan(x[i-1]+h)*(w[i-1]+h*k3_w)/2+(1+Math.tan(x[i-1]+h)/2)*(y[i-1]+h*k3)-Math.pow(Math.cos(x[i-1]+h),0.5)*(3+Math.tan(x[i-1]+h))/2;
            k4=w[i-1]+h*k3_w;
            w[i]=w[i-1]+h*(k1_w+2*k2_w+2*k3_w+k4_w)/6;
            y[i]=y[i-1]+h*(k1+2*k2+2*k3+k4)/6;
        }
        return y;
    }

    static double [] adams (double [] x, double h)
    {
        double y[]=new double[x.length];
        double w[]=new double[x.length];
        double k1,k2,k3,k4;
        double k1_w,k2_w,k3_w,k4_w;
        y[0]=2;
        w[0]=-1;
        for(int i=1;i<3;i++)
        {
            k1_w=Math.tan(x[i-1])*w[i-1]/2+(1+Math.tan(x[i-1])/2)*y[i-1]-Math.pow(Math.cos(x[i-1]),0.5)*(3+Math.tan(x[i-1]))/2;
            k1=w[i-1];
            k2_w=Math.tan(x[i-1]+h/2)*(w[i-1]+h*k1_w/2)/2+(1+Math.tan(x[i-1]+h/2)/2)*(y[i-1]+h*k1/2)-Math.pow(Math.cos(x[i-1]+h/2),0.5)*(3+Math.tan(x[i-1]+h/2))/2;
            k2=w[i-1]+h*k1_w/2;
            k3_w=Math.tan(x[i-1]+h/2)*(w[i-1]+h*k2_w/2)/2+(1+Math.tan(x[i-1]+h/2)/2)*(y[i-1]+h*k2/2)-Math.pow(Math.cos(x[i-1]+h/2),0.5)*(3+Math.tan(x[i-1]+h/2))/2;
            k3=w[i-1]+h*k2_w/2;
            k4_w=Math.tan(x[i-1]+h)*(w[i-1]+h*k3_w)/2+(1+Math.tan(x[i-1]+h)/2)*(y[i-1]+h*k3)-Math.pow(Math.cos(x[i-1]+h),0.5)*(3+Math.tan(x[i-1]+h))/2;
            k4=w[i-1]+h*k3_w;
            w[i]=w[i-1]+h*(k1_w+2*k2_w+2*k3_w+k4_w)/6;
            y[i]=y[i-1]+h*(k1+2*k2+2*k3+k4)/6;
        }
        for(int i=3;i<x.length;i++)
        {
            k1=h*(Math.tan(x[i-1])*w[i-1]/2+(1+Math.tan(x[i-1])/2)*y[i-1]-Math.pow(Math.cos(x[i-1]),0.5)*(3+Math.tan(x[i-1]))/2);
            k2=h*(Math.tan(x[i-2])*w[i-2]/2+(1+Math.tan(x[i-2])/2)*y[i-2]-Math.pow(Math.cos(x[i-2]),0.5)*(3+Math.tan(x[i-2]))/2);
            k3=h*(Math.tan(x[i-3])*w[i-3]/2+(1+Math.tan(x[i-3])/2)*y[i-3]-Math.pow(Math.cos(x[i-3]),0.5)*(3+Math.tan(x[i-3]))/2);
            k4=(23*k1-16*k2+5*k3)/12;
            w[i]=w[i-1]+k4;
            y[i]=y[i-1]+h*(23*w[i-1]-16*w[i-2]+5*w[i-3])/12;
        }
        return y;
    }
    static double [] popravka(double [] y1,  double [] y,  double p)
    {
        double w[]=new double[y.length];
        for(int i=1;i<y.length;i++)
        {
            w[i]=y1[2*i]+(y1[2*i] -y[i])/(Math.pow(2,p)-1);
        }
        return w;
    }
    static double[] step(double a, double b, double h)
    {
        int n= (int) Math.round((b - a) / h);
        double[] arr = new double[n];
        for (int i = 0; i < n; i++) {
            arr[i] = a+h*i;
        }
        return arr;
    }
    public static void main ( String[] args)
    {
        double a=0;
        double b=1;
        double h=0.05;
        double [] step=step(a,b,h);
        double [] step2=step(a,b,h/2);
        double [] y_euler=euler(step,h);
        double [] y_runge=runge(step,h);
        double [] y_adams=adams(step,h);
        double [] y_euler2=euler(step2,h/2);
        double [] y_runge2=runge(step2,h/2);
        double [] y_adams2=adams(step2,h/2);
        double [] y_popravka= popravka(y_runge2, y_runge,4);
        double [] funct= new double [step.length];
        for(int i=0;i<step.length; i++)
        {
            funct[i]=func(step[i]);
        }


        XYSeriesCollection data = new XYSeriesCollection();
        XYSeries func= new XYSeries("func");
        XYSeries euler= new XYSeries("euler");
        XYSeries runge= new XYSeries("runge");
        XYSeries adams= new XYSeries("adams");
        XYSeries popravka= new XYSeries("popravka");
        for (int i = 1; i < y_euler.length; ++i) {
            func.add(step[i],funct[i]);
            euler.add(step[i],y_euler[i]);
            runge.add(step[i],y_runge[i]);
            adams.add(step[i],y_adams[i]);
            popravka.add(step[i],y_popravka[i]);
        }
        data.addSeries(func);
        data.addSeries(euler);
        data.addSeries(runge);
        data.addSeries(adams);
        data.addSeries(popravka);
        XYDataset dataset = data;
        JFreeChart chart = ChartFactory.createXYLineChart("Chart", "x", "y", dataset);

        JFrame frame = new JFrame("Frame");
        ChartPanel panel = new ChartPanel(chart);
        frame.getContentPane().add(panel);
        frame.setSize(640, 640);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.show();
        double []h1=new double[20];
        double []max1=new double[20];
        double []max2=new double[20];
        double []max3=new double[20];
        double []max4=new double[20];
        for(int j=0;j<20;j++)
        {
            h1[j]=1.0/(10+j*10);
            max1[j]=0;
            max2[j]=0;
            max3[j]=0;
            max4[j]=0;
            double [] step1=step(a,b,h1[j]);
            double [] y_euler1=euler(step1,h1[j]);
            double [] y_runge1=runge(step1,h1[j]);
            double [] y_adams1=adams(step1,h1[j]);
            double [] step3=step(a,b,h1[j]/2);
            double [] y=runge(step3,h1[j]/2);
            double [] y_popravka2 = popravka(y,y_runge1,4);
            double [] funct1= new double [step1.length];
            for(int i=0;i<step1.length; i++)
            {
                funct1[i]=func(step1[i]);
            }
            for(int i=0;i<y_euler1.length;i++)
            {
                if(max1[j]<Math.abs(funct1[i]-y_euler1[i]))
                {
                    max1[j]=Math.abs(funct1[i]-y_euler1[i]);
                }

            }
            for(int i=0;i<y_runge1.length;i++)
            {
                if(max2[j]<Math.abs(funct1[i]-y_runge1[i]))
                {
                    max2[j]=Math.abs(funct1[i]-y_runge1[i]);
                }
            }
            for(int i=0;i<y_adams1.length;i++)
            {
                if(max3[j]<Math.abs(funct1[i]-y_adams1[i]))
                {
                    max3[j]=Math.abs(funct1[i]-y_adams1[i]);
                }
            }
            for(int i=1;i<y_popravka2.length;i++)
            {
                if(max4[j]<Math.abs(funct1[i]-y_popravka2[i]))
                {
                    max4[j]=Math.abs(funct1[i]-y_popravka2[i]);
                }
            }
        }
        for(int i=0;i<20;i++)
        {
            System.out.print(h1[i]+"  ");
        }
        System.out.println();

        for(int i=0;i<20;i++)
        {
            System.out.print(max1[i]+"  ");
        }
        System.out.println();

        for(int i=0;i<20;i++)
        {
            System.out.print(max2[i]+"  ");
        }
        System.out.println();

        for(int i=0;i<20;i++)
        {
            System.out.print(max3[i]+"  ");
        }
        System.out.println();
        System.out.println();

        for(int i=0;i<20;i++)
        {
            System.out.print(max4[i]+"  ");
        }
        System.out.println();

    }

}
