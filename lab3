package lab3;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import javax.swing.*;


public class integral {
    static double func(double x)
    {
        return x*Math.exp(x);
    }
    static double integral(double x, double h)
    { return (x+h-1)*Math.exp(x+h)+ (1-x)*Math.exp(x);}

    static double[] step(double a, double b, double h)
    {
        int n= (int) Math.round((b - a) / h);
        double[] arr = new double[n];
        for (int i = 0; i < n; i++) {
            arr[i] = a+h*i;
        }
        return arr;
    }
    static double rectange(double x, double h)
    {
        return h*func(x);
    }
    static double intRectange(double[] arr,double h)
    {
        double result=0;
        for( int i=0; i< arr.length;i++ )
        {
            result+=rectange(arr[i],h);
        }
        return result;
    }
    static double traipzoid(double x, double h)
    {
        return h*(func(x)+func(x+h))/2;
    }
    static double intTraipzoid(double[] arr,double h)
    {
        double result=0;
        for( int i=0; i< arr.length;i++ )
        {
            result+=traipzoid(arr[i],h);
        }
        return result;
    }
    static double simson(double x, double h)
    {
        return h*(func(x)+4*func(x+h/2)+func(x+h))/6;
    }
    static double intSimson(double[]arr,double h)
    {
        double result=0;
        for( int i=0; i< arr.length;i++ )
        {
            result+=simson(arr[i],h);
        }
        return result;
    }
    static double gaus(double x, double h){ return h*(func((2*x+h)/2+h/(2*Math.sqrt(3))) +func((2*x+h)/2-h/(2*Math.sqrt(3))))/2;}
    static double intGaus(double[]arr,double h)
    {
        double result=0;
        for( int i=0; i< arr.length;i++ )
        {
            result+=gaus(arr[i],h);
        }
        return result;
    }
    static double koef1(double[]x, double[]y)
    {
        double z;
        double z1=0;
        double z2=0;
        double z3=0;
        double z4=0;
        for(int i=0; i<x.length;i++)
        {
            z1+=x[i];
        }
        for(int i=0; i<y.length;i++)
        {
            z2+=y[i];
        }
        for(int i=0; i<y.length;i++)
        {
            z3+=y[i]*x[i];
        }
        for(int i=0; i<y.length;i++)
        {
            z4+=Math.pow(x[i],2);
        }
        z=(y.length*z3-z1*z2)/(x.length*z4-z1*z1);
        return z;

    }
    public static void main ( String[] args)
    {
        double a=-2;
        double b=1;
        double[] h= new double [20];
        double[] h2= new double [20];
        double[] max= new double [h.length];
        double[] max1= new double [h.length];
        double[] max2= new double [h.length];
        double[] max3= new double [h.length];
        double[] max4= new double [h.length];
        for( int k=0;k<h.length;k++) {
            h[k]=1.0/(100+k);
            double[] arr = step(a, b, h[k]);
           max[k]= Math.abs(integral(a,b-a) -intRectange(arr, h[k]));

        }
        for(int i=0; i<h.length;i++)
        {
            max1[i]=Math.log(max[i])+4.37;
        }
        double [] h1= new double[h.length];
        for(int i=0; i<h1.length;i++)
        {
            h1[i]=Math.log(h[i])+4.77;

        }

        System.out.println(koef1(h1,max1));
        for(int k=0;k<h.length;k++)
        {
            double[] arr = step(a, b, h[k]);
            max[k]= Math.abs(integral(a,b-a) -intTraipzoid(arr, h[k]));
        }
        for(int i=0;i<h.length;i++)
        {
            max2[i]=Math.log(max[i])+10.31;
        }
        System.out.println(koef1(h1,max2));
        for(int k=0;k<h.length;k++)
        {
            double[] arr = step(a, b, h[k]);
            max[k]= Math.abs(integral(a,b-a) -intSimson(arr, h[k]));
        }
        for(int i=0;i<h.length;i++)
        {
            max3[i]=Math.log(max[i])+24.68;

        }

        System.out.println(koef1(h1,max3));

        for(int k=0;k<h.length;k++)
        {
            double[] arr = step(a, b, h[k]);
            max[k]= Math.abs(integral(a,b-a) -intGaus(arr, h[k]));
        }
        for(int i=0;i<h.length;i++)
        {
            max4[i]=Math.log(max[i])+25.08;

        }

        System.out.println(koef1(h1,max4));

        XYSeriesCollection data = new XYSeriesCollection();
        XYSeries rectangle = new XYSeries("Rectangle");
        XYSeries trapeze = new XYSeries("Trapeze");
        XYSeries simpson = new XYSeries("Simpson");
        XYSeries gaus = new XYSeries("Gaus");
        for (int i = 0; i < h.length; ++i) {
            rectangle.add(h1[i], max1[i]);
            trapeze.add(h1[i], max2[i]);
            simpson.add(h1[i], max3[i]);
            gaus.add(h1[i],max4[i]);
        }
        data.addSeries(rectangle);
        data.addSeries(trapeze);
        data.addSeries(simpson);
        data.addSeries(gaus);
        XYDataset dataset = data;
        JFreeChart chart = ChartFactory.createXYLineChart("Chart", "ln(step)", "ln(err)", dataset);

        JFrame frame = new JFrame("Frame");
        ChartPanel panel = new ChartPanel(chart);
        frame.getContentPane().add(panel);
        frame.setSize(640, 640);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.show();

    }

}
